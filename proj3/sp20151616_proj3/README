본 프로그램은 가상 메모리를 참조해 SIC 명령어를 실행시킬 수 있는 
2019학년도 1학기 시스템 프로그래밍 과목의 개별 프로젝트 #3 입니다

프로그램 및 README 작성자 : 최승환
작성자 학번 : 20151616

 - 실행파일 생성
 프로그램을 실행시키기 위해서는 우선 실행파일을 생성해야 합니다.
 미리 작성되어 있는 Makefile에는 실행파일을 생성하기 위한 코드가 기록되어 있습니다
 'make' 명령어를 터미널에 칠 경우, 자동으로 실행파일을 생성해주며,
 이 때 20151616.c 와 20151616.h 를 참조해 실행파일을 만듭니다
 실행파일을 만드는 과정에서 20151616.o 와 20151616.out 파일이 만들어집니다
 실행파일의 이름은 20151616.out 입니다

  - 실행파일 실행
  현재 디렉터리에 있는 해당 실행파일을 실행시키시려면 ./20151616.out 명령어를 사용합니다.

   - 명령어 구성 및 기능요약
   실행파일을 성공적으로 실행시켰을 시 다음과 같은 메세지가 뜹니다.
   'sicsim> '
   명령어를 치면 해당 프로그램이 가지고 있는 명령어와 같은지 체크해, 같은 것이 있는 경우
   실행시킵니다

    - 명령어 구성
    프로그램이 가지고 있는 명령어 구성은 다음과 같습니다.
    h[elp]			: 명령어 종류를 모두 출력합니다
    d[ir]			: 현재 디렉터리에 있는 파일들을 모두 출력하며, 파일종류에 따라 다른 형식으로 출력합니다
    q[uit]			: sicsim 프로그램을 종료합니다
    hi[story]			: 실행파일 실행 후 종료전까지 사용한 명령어를 모두 출력합니다
    du[mp] [start, end]		: start부터 end 까지의 범위에 있는 가상메모리 값을 출력합니다
    e[dit] address, value	: address 에 해당하는 가상 메모리에 value 값을 입력합니다
    f[ill] start, end, value	: start부터 end 까지의 범위에 있는 가상메모리 값에 value를 입력합니다
    reset			: 가상메모리의 모든 값을 0으로 초기화시킵니다
    opcode mnemonic		: mnemonic 에 해당하는 opcode 값을 출력합니다.
    opcodelist		: opcode table 에 있는 모든 명령어와 그 정보를 출력합니다.
	assemble filename : filename 에 해당하는 파일을 assemble합니다. 해당 파일은 .asm 확장자여야 하며, 내용은 SIC/XE 형식을 따라야 합니다.
	type filename : filename 에 해당하는 파일의 내용을 출력합니다. 해당 파일이 없다면 에러메세지를 출력합니다.
	symbol : 저장되어 있는 symboltable 을 출력합니다. assemble 을 이용해 파일을 assemble 한 후 생성되며, 비어 있는 symboltable을 출력할 경우 에러메세지가 출력됩니다.
	progaddr [address]	: 프로그램의 시작주소를 address로 설정합니다.
	loader [object filename1] [object filename2] [...]	: filenameN 에 해당하는 파일을 열어 순서대로 로드합니다.
	run				: 메모리에 저장된 값에 따라 프로그램을 실행시킵니다.
	bp [address]	: address 에 해당하는 breakpoint를 지정합니다.
	bp				: 현재 저장된 breakpoint를 모두 출력합니다.

     - 입력 예시
	 progaddr [address] 는 프로그램을 시작하고 싶은 주소를 16진수로 적어서 입력하면, 로드시켰을 때, 그 메모리를 기준으로 값을 저장하도록 도와줍니다.

	 loader [object filename1] [obcject filename2] 는 파일 여러개를 로드 해주는 기능입니다. 이 때 파일은 꼭 오브젝트 파일이어야 합니다.
- 사용예시) loader proga.obj progb.obj progc.obj

	 run 은 로드가 완료된 뒤에 사용하는 명령어입니다. 로드를 사용해 가상 메모리에 값들을 넣으면, run 이 실행되면서 그 값을 읽어가며 프로그램을 실행시킵니다.

	 bp [address] 는 address 에 디버깅을 위해 중지시키고 싶은 줄의 번호를 16진수로 써넣으면 됩니다.
	 bp 는 이렇게 저장한 모든 breakpoint를 출력해줍니다.

     assemble filename 의 경우, filename의 부분에 파일명을 작성해 넣으면 됩니다. 해당 파일은 .asm 확장자여야 합니다. 아닐 경우, 에러메세지가 출력됩니다.

     - 주의 사항
     해당 텍스트 파일의 내용이 기존 형식과 다른 경우 결과가 달라질 수 있습니다.

